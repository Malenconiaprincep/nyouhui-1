{
  "name": "mongodb-rest",
  "description": "REST API Server for MongoDB",
  "version": "0.10.12",
  "author": {
    "name": "Ashley Davis",
    "email": "ashley@codecapers.com.au"
  },
  "contributors": [
    {
      "name": "Ashley Davis",
      "email": "ashley@codecapers.com.au"
    },
    {
      "name": "Mike Vegeto",
      "email": "michael.vegeto@gmail.com"
    },
    {
      "name": "Ryan Carmichael",
      "email": "ryan.carmichael@elabsolutions.com"
    },
    {
      "name": "Tom de Grunt",
      "email": "tom@degrunt.nl"
    },
    {
      "name": "BenjamÃ­n Eidelman"
    },
    {
      "name": "Samyak Bhuta"
    }
  ],
  "dependencies": {
    "body-parser": "^1.4.3",
    "express": "= 4.4.5",
    "express-csv": "^0.6.0",
    "extend": "^1.3.0",
    "mongodb": "= 1.4.7",
    "node-uuid": "^1.4.1",
    "promised-mongo": "^0.11.1"
  },
  "keywords": [
    "mongodb",
    "mongo",
    "db",
    "web",
    "rest",
    "restful",
    "api"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/codecapers/mongodb-rest.git"
  },
  "directories": {
    "lib": "./lib"
  },
  "bin": {
    "mongodb-rest": "./bin/mongodb-rest"
  },
  "engines": {
    "node": ">= 0.10.24"
  },
  "devDependencies": {
    "jasmine-node": "^1.14.5",
    "promised-mongo": "^0.11.1",
    "q": "^1.0.1",
    "request": "^2.49.0"
  },
  "scripts": {
    "test": "jasmine-node ./ --verbose --captureExceptions",
    "start": "node server.js"
  },
  "bugs": {
    "url": "https://github.com/codecapers/mongodb-rest/issues"
  },
  "homepage": "https://github.com/codecapers/mongodb-rest",
  "readme": "mongodb-rest [![Build Status](https://travis-ci.org/codecapers/mongodb-rest.png)](https://travis-ci.org/codecapers/mongodb-rest)\r\n============\r\n\r\nA simple but incredibly useful REST API server for MongoDB using Node, using Express and the native node.js MongoDB driver.\r\n\r\nAs Tom has said this REST server has no security and is not fit for use in production. So be warned! Work is currently being done to improve the security of mongodb-rest, but this is still a work-in-progress.\r\n\r\nI have found this REST server to be invaluable for rapid prototyping web applications. When you don't care about security and you just need to try something out without investing the time to build a proper secure REST API.\r\n\r\nRecent Updates\r\n--------------\r\n\r\nSimple connection pooling has been added by @elabrc.\r\n\r\nA simple token-based authentication has been added to mongodb-rest (thanks to @ZECTBynmo). This is a prototype feature only and may change in the future. I am considering making authentication plugin-based so you can roll your own if necessary. If you have any thoughts on how this should work please let us know.\r\n\r\nInstallation\r\n------------\r\n\r\nInstallation is via npm: \r\n> npm install mongodb-rest\r\n\r\nYou can install globally using -g: \r\n> npm install -g mongodb-rest\r\n\r\nNow issue `mongodb-rest` on the command line and the server should start.\r\n\r\nNOTE: Make sure you are running a MongoDB database in addition to the mongodb-rest server.\r\n\r\nTest\r\n----\r\n\r\nAfter installation you can quickly test it by issuing the following from the command line:<br/>\r\n> curl -d '{ \"A1\" : 201 }' -H \"Content-Type: application/json\" http://localhost:3000/test/example1\r\n\r\nThis should add a document to the \"test\" db.example1 collection:\r\n\r\n\t{\r\n\t\t\"A1\": 201,\r\n\t\t\"_id\": ObjectId(\"4e90e196b0c7f4687000000e\")\r\n\t}\r\n\r\nStart Server Programmatically\r\n-----------------------------\r\n\r\nmongodb-rest can easily be started programmatically by 'requiring' the module and calling `startServer`.\r\n\r\n\tvar mongodbRest = require('mongodb-rest');\r\n\tmongodbRest.startServer();\r\n\r\nYou can optionally pass in a configuration object:\r\n\r\n\tmongodbRest.startServer(config);\r\n\r\nConfiguration\r\n-------------\r\n\r\nWhen starting from the command line you should have `config.json` in the current working directory. The project includes an example configuration file.\r\n\r\nWhen starting the server programmatically you can pass in a Javascript object for mongodb-rest configuration.\r\n\r\nHere is an example JSON configuration object:\r\n\r\n\t{ \r\n\t\t\"db\": \"mongodb://localhost:27017\",\r\n\t\t\"server\": {\r\n\t\t\t\"port\": 3000,\r\n\t\t\t\"address\": \"0.0.0.0\"\r\n\t\t},\r\n\t\t\"accessControl\": {\r\n\t\t\t\"allowOrigin\": \"*\",\r\n\t\t\t\"allowMethods\": \"GET,POST,PUT,DELETE,HEAD,OPTIONS\",\r\n\t\t\t\"allowCredentials\": false\r\n\t\t},\r\n\t    \"mongoOptions\": {\r\n\t        \"serverOptions\": {\r\n\t        },\r\n\t        \"dbOptions\": {\r\n\t            \"w\": 1\r\n\t        }\r\n\t    },\r\n\t\t\"humanReadableOutput\": true,\r\n\t\t\"urlPrefix\": \"\"\r\n\t}\r\n\r\n`db` specifies the mongodb connection string for connection to the database. It defaults when not specified.\r\n\r\nFor documentation on the mongodb connection string: http://docs.mongodb.org/manual/reference/connection-string/\r\n\r\nFor backward compatibility `db` can also be set to an object that specified `host` and `port` as follows:\r\n\r\n\t\"db\": {\r\n\t\t\"port\": 27017,\r\n\t\t\"host\": \"localhost\"\r\n\t},\r\n\r\n`server` specifies the configuration for the REST API server, it also defaults if not specified.\r\n\r\n`mongoOptions` specifies MongoDB server and database connection parameters. These are passed directly to the MongoDB API.\r\n\r\nValid options under `serverOptions` are documented here: http://mongodb.github.io/node-mongodb-native/api-generated/server.html.\r\n\r\n`auto_reconnect` is automatically enabled, don't override this or mongodb-rest may not work as expected.\r\n\r\nValid options under `dbOptions` are documented here: http://mongodb.github.io/node-mongodb-native/api-generated/db.html.\r\n\r\n`w` (write concern) is set to 1 so that acknowledgement of the write is recieved by mongodb-rest, currently this must be enabled for error checking.\r\n\r\nSet `collectionOutputType` to `csv` to returns collections as csv data rather than json.\r\n\r\nIf you are configuring the server procedurally you can assign a Javascript function to `transformCollection` which will transform each collection before returning it via HTTP.\r\n\r\nThe `accessControl` options allow you to set the following headers on the HTTP response:\r\n- Access-Control-Allow-Origin\r\n- Access-Control-Allow-Methods\r\n- Access-Control-Allow-Credentials\r\n\r\nHelp for these headers can be found here:\r\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS\r\n\r\nThe `urlPrefix` option allows specification of a prefix for the REST API URLs. This defaults to an empty string, meaning no prefix which was the original behavior. For example, given the following REST API URL:\r\n\r\n\t/database/collection\r\n\r\nSetting a URL prefix of `/blah` will change the example REST API URL to:\r\n\r\n\t/blah/database/collection\r\n\r\nThe URL prefix should allow the REST API to co-exist with another REST API and can also be used a very primitive form of security (by setting the prefix to a _secret key_).\r\n\r\nLogging\r\n-------\r\n\r\nWinston logging is supported if you configure the REST API programmatically. When you call `startServer` and pass in configuration options set the `logger` option to your Winston logger. Mongodb-rest uses the following functions: verbose, info, warn and error.\r\n\r\nPlease see the Winston documentation for more setup details: https://github.com/flatiron/winston\r\n\r\nSupported REST API\r\n------------------\r\n\r\nSupported REST API requests:\r\n\r\n* `GET /dbs` - Returns the names of all databases.\r\n* `GET /<db>/` - Returns names of all collections in the specified database.\r\n* `GET /<db>/<collection>` - Returns all documents in the specified collection.\r\n* `GET /<db>/<collection>?output=csv` - Returns all documents in collection in csv format.\r\n* `GET /<db>/<collection>?query=%7B%22isDone%22%3A%20false%7D` - Returns all documents satisfying query.\r\n* `GET /<db>/<collection>?query=%7B%22isDone%22%3A%20false%7D&limit=2&skip=2` - Ability to add options to query (limit, skip, \r\netc)\r\n* `GET /<db>/<collection>/id` - Returns document with _id_\r\n* `POST /<db>/<collection>` - Insert new document in collection (document in POST body)\r\n* `PUT /<db>/<collection>/id` - Update document with _id_ (updated document in PUT body)\r\n* `DELETE /<db>/<collection>/id` - Delete document with _id_\r\n\r\nContent Type:\r\n\r\n* Please make sure `application/json` is used as Content-Type when using POST/PUT with request bodies.\r\n\r\nDependencies\r\n------------\r\n\r\n* Are indicated in package.json. \r\n\r\nAuth\r\n----\r\n\r\n**WARNING: This is a prototype feature and may change in the future**.\r\n\r\nmongodb-rest supports a simple token-based auth system. Login is accomplilshed by a HTTP POST to `/login` with `username` and `password`, the server will verify the user's password against a secret database. Upon authentication an access token is returned that must be attached to each subsequent API requests.\r\n\r\nAn authorization token is specified via query parameter as follows:\r\n\r\n```\r\nGET /db/collection?token=234d43fdg-34324d-dd-dsdf-f435d\r\n```\r\n\r\nAuthentication is enabled by adding `auth` to config.json as follows:\r\n\r\n\t\"auth\": {\r\n\t\t\"usersDBConnection\": \"mongodb://localhost/auth\",\r\n\t\t\"usersCollection\": \"users\",\r\n\t\t\"tokenDBConnection\": \"mongodb://localhost/auth\",\r\n\t\t\"tokensCollectionName\": \"tokens\",\r\n\t\t\"universalAuthToken\": \"this-token-grants-universal-access-so-please-change-it\",\r\n\t\t\"tokenExpirationTimeHours\": 8\r\n\t}\r\n\r\n`auth` requires at least:\r\n\r\n* usersDBConnection - mongodb connection string for the users database.\r\n* tokenDBConnection - mongodb connection string for the tokens database.\r\n\r\nHere are the docs for mongodb connection strings: http://docs.mongodb.org/manual/reference/connection-string/\r\n\r\nThe following are optional:\r\n\r\n* usersCollection - The auth database collection where users are stored.\r\n* tokensCollectionName - The auth database collection where tokens are stored.\r\n* universalAuthToken - Specifies a token that can be used for universal authorization.\r\n* tokenExpirationTimeHours - Specifies the timeout in hours before tokens must be renewed by 'login'.\r\n\r\nAn example configuration `example config with auth.json` is included with a working authentication setup.\r\n\r\n** Please note that mongodb exposes all databases in the server, including your secret authentication database. Move your auth database to a different server on the same machine or ensure MongoDB authentication is setup correctly. Work will be done in the future that allows particular databases to be whitelisted/blacklisted and not exposed. **\r\n\r\n\r\nGetting the Code\r\n----------------\r\n\r\nYou can get the code by forking/cloning the repo at:\r\n\r\n https://github.com/codecapers/mongodb-rest.git\r\n\r\nTesting\r\n-------\r\n\r\nIntegration tests use jasmine-node. \r\n\r\nRun 'jasmine-node' from the main folder: \r\n\r\n>jasmine-node .\\ --verbose\r\n\r\nTravis-CI\r\n---------\r\n\r\nhttps://travis-ci.org/ashleydavis/mongodb-rest\r\n\r\nFuture\r\n------\r\n\r\nRoadmap:<br/>\r\nhttps://trello.com/b/OzRxPSjO/mongodb-rest-roadmap\r\n\r\nCredits\r\n-------\r\n\r\n* [MongoDB Driver](http://github.com/christkv/node-mongodb-native)\r\n* [Express](http://expressjs.com/)\r\n* [npm](http://npmjs.org/)\r\n\r\nTesting:\r\n* [Jasmine-Node](https://github.com/mhevery/jasmine-node)\r\n* [Q (for async testing)](https://github.com/kriskowal/q)\r\n",
  "readmeFilename": "README.md",
  "_id": "mongodb-rest@0.10.12",
  "_shasum": "587fdc8b4637dcff2da0f25735cc7fd69fbe23e5",
  "_from": "mongodb-rest@",
  "_resolved": "http://registry.cnpmjs.org/mongodb-rest/download/mongodb-rest-0.10.12.tgz"
}
